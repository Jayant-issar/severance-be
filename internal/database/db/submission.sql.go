// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: submission.sql

package db

import (
	"context"
	"database/sql"
)

const createSubmission = `-- name: CreateSubmission :one
insert into submissions (id, user_id, assignment_id, code, language, status, runtime_ms, memory_kb) values ($1, $2, $3, $4, $5, $6, $7, $8) returning id, user_id, assignment_id, code, language, status, runtime_ms, memory_kb, created_at
`

type CreateSubmissionParams struct {
	ID           string         `json:"id"`
	UserID       string         `json:"user_id"`
	AssignmentID string         `json:"assignment_id"`
	Code         string         `json:"code"`
	Language     string         `json:"language"`
	Status       sql.NullString `json:"status"`
	RuntimeMs    sql.NullInt32  `json:"runtime_ms"`
	MemoryKb     sql.NullInt32  `json:"memory_kb"`
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) (Submission, error) {
	row := q.db.QueryRowContext(ctx, createSubmission,
		arg.ID,
		arg.UserID,
		arg.AssignmentID,
		arg.Code,
		arg.Language,
		arg.Status,
		arg.RuntimeMs,
		arg.MemoryKb,
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AssignmentID,
		&i.Code,
		&i.Language,
		&i.Status,
		&i.RuntimeMs,
		&i.MemoryKb,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubmission = `-- name: DeleteSubmission :exec
delete from submissions where id = $1
`

func (q *Queries) DeleteSubmission(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSubmission, id)
	return err
}

const getSubmission = `-- name: GetSubmission :one
select id, user_id, assignment_id, code, language, status, runtime_ms, memory_kb, created_at from submissions where id = $1
`

func (q *Queries) GetSubmission(ctx context.Context, id string) (Submission, error) {
	row := q.db.QueryRowContext(ctx, getSubmission, id)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AssignmentID,
		&i.Code,
		&i.Language,
		&i.Status,
		&i.RuntimeMs,
		&i.MemoryKb,
		&i.CreatedAt,
	)
	return i, err
}

const getSubmissionsByAssignment = `-- name: GetSubmissionsByAssignment :many
select id, user_id, assignment_id, code, language, status, runtime_ms, memory_kb, created_at from submissions where assignment_id = $1 order by created_at desc
`

func (q *Queries) GetSubmissionsByAssignment(ctx context.Context, assignmentID string) ([]Submission, error) {
	rows, err := q.db.QueryContext(ctx, getSubmissionsByAssignment, assignmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Submission{}
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AssignmentID,
			&i.Code,
			&i.Language,
			&i.Status,
			&i.RuntimeMs,
			&i.MemoryKb,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubmissionsByUser = `-- name: GetSubmissionsByUser :many
select id, user_id, assignment_id, code, language, status, runtime_ms, memory_kb, created_at from submissions where user_id = $1 order by created_at desc
`

func (q *Queries) GetSubmissionsByUser(ctx context.Context, userID string) ([]Submission, error) {
	rows, err := q.db.QueryContext(ctx, getSubmissionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Submission{}
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AssignmentID,
			&i.Code,
			&i.Language,
			&i.Status,
			&i.RuntimeMs,
			&i.MemoryKb,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubmission = `-- name: UpdateSubmission :one
update submissions set status = $2, runtime_ms = $3, memory_kb = $4 where id = $1 returning id, user_id, assignment_id, code, language, status, runtime_ms, memory_kb, created_at
`

type UpdateSubmissionParams struct {
	ID        string         `json:"id"`
	Status    sql.NullString `json:"status"`
	RuntimeMs sql.NullInt32  `json:"runtime_ms"`
	MemoryKb  sql.NullInt32  `json:"memory_kb"`
}

func (q *Queries) UpdateSubmission(ctx context.Context, arg UpdateSubmissionParams) (Submission, error) {
	row := q.db.QueryRowContext(ctx, updateSubmission,
		arg.ID,
		arg.Status,
		arg.RuntimeMs,
		arg.MemoryKb,
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AssignmentID,
		&i.Code,
		&i.Language,
		&i.Status,
		&i.RuntimeMs,
		&i.MemoryKb,
		&i.CreatedAt,
	)
	return i, err
}
