// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: assignment.sql

package db

import (
	"context"
	"database/sql"
)

const createAssignment = `-- name: CreateAssignment :one
insert into assignments (id, title, description, difficulty, tags) values ($1, $2, $3, $4, $5) returning id, title, description, difficulty, tags, created_at
`

type CreateAssignmentParams struct {
	ID          string         `json:"id"`
	Title       string         `json:"title"`
	Description string         `json:"description"`
	Difficulty  string         `json:"difficulty"`
	Tags        sql.NullString `json:"tags"`
}

func (q *Queries) CreateAssignment(ctx context.Context, arg CreateAssignmentParams) (Assignment, error) {
	row := q.db.QueryRowContext(ctx, createAssignment,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Difficulty,
		arg.Tags,
	)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Difficulty,
		&i.Tags,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAssignment = `-- name: DeleteAssignment :exec
delete from assignments where id = $1
`

func (q *Queries) DeleteAssignment(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAssignment, id)
	return err
}

const getAssignment = `-- name: GetAssignment :one
select id, title, description, difficulty, tags, created_at from assignments where id = $1
`

func (q *Queries) GetAssignment(ctx context.Context, id string) (Assignment, error) {
	row := q.db.QueryRowContext(ctx, getAssignment, id)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Difficulty,
		&i.Tags,
		&i.CreatedAt,
	)
	return i, err
}

const listAssignments = `-- name: ListAssignments :many
select id, title, description, difficulty, tags, created_at from assignments order by created_at desc
`

func (q *Queries) ListAssignments(ctx context.Context) ([]Assignment, error) {
	rows, err := q.db.QueryContext(ctx, listAssignments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Assignment{}
	for rows.Next() {
		var i Assignment
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Difficulty,
			&i.Tags,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssignment = `-- name: UpdateAssignment :one
update assignments set title = $2, description = $3, difficulty = $4, tags = $5 where id = $1 returning id, title, description, difficulty, tags, created_at
`

type UpdateAssignmentParams struct {
	ID          string         `json:"id"`
	Title       string         `json:"title"`
	Description string         `json:"description"`
	Difficulty  string         `json:"difficulty"`
	Tags        sql.NullString `json:"tags"`
}

func (q *Queries) UpdateAssignment(ctx context.Context, arg UpdateAssignmentParams) (Assignment, error) {
	row := q.db.QueryRowContext(ctx, updateAssignment,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Difficulty,
		arg.Tags,
	)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Difficulty,
		&i.Tags,
		&i.CreatedAt,
	)
	return i, err
}
