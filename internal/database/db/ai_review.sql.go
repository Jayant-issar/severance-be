// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: ai_review.sql

package db

import (
	"context"
	"database/sql"
)

const createAIReview = `-- name: CreateAIReview :one
insert into ai_reviews (id, submission_id, feedback, score, review_agent) values ($1, $2, $3, $4, $5) returning id, submission_id, feedback, score, review_agent, created_at
`

type CreateAIReviewParams struct {
	ID           string         `json:"id"`
	SubmissionID string         `json:"submission_id"`
	Feedback     string         `json:"feedback"`
	Score        sql.NullInt32  `json:"score"`
	ReviewAgent  sql.NullString `json:"review_agent"`
}

func (q *Queries) CreateAIReview(ctx context.Context, arg CreateAIReviewParams) (AiReview, error) {
	row := q.db.QueryRowContext(ctx, createAIReview,
		arg.ID,
		arg.SubmissionID,
		arg.Feedback,
		arg.Score,
		arg.ReviewAgent,
	)
	var i AiReview
	err := row.Scan(
		&i.ID,
		&i.SubmissionID,
		&i.Feedback,
		&i.Score,
		&i.ReviewAgent,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAIReview = `-- name: DeleteAIReview :exec
delete from ai_reviews where id = $1
`

func (q *Queries) DeleteAIReview(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAIReview, id)
	return err
}

const getAIReview = `-- name: GetAIReview :one
select id, submission_id, feedback, score, review_agent, created_at from ai_reviews where id = $1
`

func (q *Queries) GetAIReview(ctx context.Context, id string) (AiReview, error) {
	row := q.db.QueryRowContext(ctx, getAIReview, id)
	var i AiReview
	err := row.Scan(
		&i.ID,
		&i.SubmissionID,
		&i.Feedback,
		&i.Score,
		&i.ReviewAgent,
		&i.CreatedAt,
	)
	return i, err
}

const getAIReviewsBySubmission = `-- name: GetAIReviewsBySubmission :many
select id, submission_id, feedback, score, review_agent, created_at from ai_reviews where submission_id = $1 order by created_at desc
`

func (q *Queries) GetAIReviewsBySubmission(ctx context.Context, submissionID string) ([]AiReview, error) {
	rows, err := q.db.QueryContext(ctx, getAIReviewsBySubmission, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AiReview{}
	for rows.Next() {
		var i AiReview
		if err := rows.Scan(
			&i.ID,
			&i.SubmissionID,
			&i.Feedback,
			&i.Score,
			&i.ReviewAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAIReview = `-- name: UpdateAIReview :one
update ai_reviews set feedback = $2, score = $3, review_agent = $4 where id = $1 returning id, submission_id, feedback, score, review_agent, created_at
`

type UpdateAIReviewParams struct {
	ID          string         `json:"id"`
	Feedback    string         `json:"feedback"`
	Score       sql.NullInt32  `json:"score"`
	ReviewAgent sql.NullString `json:"review_agent"`
}

func (q *Queries) UpdateAIReview(ctx context.Context, arg UpdateAIReviewParams) (AiReview, error) {
	row := q.db.QueryRowContext(ctx, updateAIReview,
		arg.ID,
		arg.Feedback,
		arg.Score,
		arg.ReviewAgent,
	)
	var i AiReview
	err := row.Scan(
		&i.ID,
		&i.SubmissionID,
		&i.Feedback,
		&i.Score,
		&i.ReviewAgent,
		&i.CreatedAt,
	)
	return i, err
}
