// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: test_case.sql

package db

import (
	"context"
	"database/sql"
)

const createTestCase = `-- name: CreateTestCase :one
insert into test_cases (id, assignment_id, input, expected_output, is_hidden) values ($1, $2, $3, $4, $5) returning id, assignment_id, input, expected_output, is_hidden, created_at
`

type CreateTestCaseParams struct {
	ID             string       `json:"id"`
	AssignmentID   string       `json:"assignment_id"`
	Input          string       `json:"input"`
	ExpectedOutput string       `json:"expected_output"`
	IsHidden       sql.NullBool `json:"is_hidden"`
}

func (q *Queries) CreateTestCase(ctx context.Context, arg CreateTestCaseParams) (TestCase, error) {
	row := q.db.QueryRowContext(ctx, createTestCase,
		arg.ID,
		arg.AssignmentID,
		arg.Input,
		arg.ExpectedOutput,
		arg.IsHidden,
	)
	var i TestCase
	err := row.Scan(
		&i.ID,
		&i.AssignmentID,
		&i.Input,
		&i.ExpectedOutput,
		&i.IsHidden,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTestCase = `-- name: DeleteTestCase :exec
delete from test_cases where id = $1
`

func (q *Queries) DeleteTestCase(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTestCase, id)
	return err
}

const getTestCase = `-- name: GetTestCase :one
select id, assignment_id, input, expected_output, is_hidden, created_at from test_cases where id = $1
`

func (q *Queries) GetTestCase(ctx context.Context, id string) (TestCase, error) {
	row := q.db.QueryRowContext(ctx, getTestCase, id)
	var i TestCase
	err := row.Scan(
		&i.ID,
		&i.AssignmentID,
		&i.Input,
		&i.ExpectedOutput,
		&i.IsHidden,
		&i.CreatedAt,
	)
	return i, err
}

const getTestCasesByAssignment = `-- name: GetTestCasesByAssignment :many
select id, assignment_id, input, expected_output, is_hidden, created_at from test_cases where assignment_id = $1 order by created_at
`

func (q *Queries) GetTestCasesByAssignment(ctx context.Context, assignmentID string) ([]TestCase, error) {
	rows, err := q.db.QueryContext(ctx, getTestCasesByAssignment, assignmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TestCase{}
	for rows.Next() {
		var i TestCase
		if err := rows.Scan(
			&i.ID,
			&i.AssignmentID,
			&i.Input,
			&i.ExpectedOutput,
			&i.IsHidden,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTestCase = `-- name: UpdateTestCase :one
update test_cases set assignment_id = $2, input = $3, expected_output = $4, is_hidden = $5 where id = $1 returning id, assignment_id, input, expected_output, is_hidden, created_at
`

type UpdateTestCaseParams struct {
	ID             string       `json:"id"`
	AssignmentID   string       `json:"assignment_id"`
	Input          string       `json:"input"`
	ExpectedOutput string       `json:"expected_output"`
	IsHidden       sql.NullBool `json:"is_hidden"`
}

func (q *Queries) UpdateTestCase(ctx context.Context, arg UpdateTestCaseParams) (TestCase, error) {
	row := q.db.QueryRowContext(ctx, updateTestCase,
		arg.ID,
		arg.AssignmentID,
		arg.Input,
		arg.ExpectedOutput,
		arg.IsHidden,
	)
	var i TestCase
	err := row.Scan(
		&i.ID,
		&i.AssignmentID,
		&i.Input,
		&i.ExpectedOutput,
		&i.IsHidden,
		&i.CreatedAt,
	)
	return i, err
}
